name: Release

on:
  push:
    branches: [ "ci" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
#  check:
#    runs-on: ubuntu-latest
#    if: ${{ contains(github.event.commits[0].message, '+release') || github.event_name == 'workflow_dispatch'  }}
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Check git tag
#        run: |
#          version=$(grep version Cargo.toml -m 1 | cut -d'=' -f2 | tr -d "\r" | tr -d ' ' | tr -d '"' | tr -d "'")
#          git rev-parse $version || exit 0
#          exit 1
  build:
    runs-on: ${{ matrix.host_os }}
#    needs: check
    continue-on-error: true
    strategy:
      matrix:
        include:
#          - target: x86_64-pc-windows-msvc
#            filename: file_zip_win32_x64.exe
#            host_os: windows-latest
#
#          - target: x86_64-unknown-linux-musl
#            filename: file_zip_linux_x64
#            host_os: ubuntu-latest
#            use_cross: false
#            install: "musl-tools"
#
#          - target: aarch64-unknown-linux-musl
#            filename: file_zip_linux_arm64
#            host_os: ubuntu-latest
#            use_cross: true
#
#          - target: arm-unknown-linux-musleabihf
#            filename: file_zip_linux_arm
#            host_os: ubuntu-latest
#            use_cross: true
#
#          - target: i686-unknown-linux-musl
#            filename: file_zip_linux_386
#            host_os: ubuntu-latest
#            use_cross: true

          - target: mips-unknown-linux-musl
            filename: file_zip_linux_mips
            host_os: ubuntu-latest
            use_cross: true

          - target: mips64-openwrt-linux-musl
            filename: file_zip_linux_mips64(openwrt)
            host_os: ubuntu-latest

          - target: mips64-unknown-linux-muslabi64
            filename: file_zip_linux_mips64
            host_os: ubuntu-latest
            use_cross: true

          - target: mipsel-unknown-linux-musl
            filename: file_zip_linux_mipsle
            host_os: ubuntu-latest
            use_cross: true

          - target: powerpc64le-unknown-linux-musl
            filename: file_zip_linux_ppc64
            host_os: ubuntu-latest

          - target: s390x-unknown-linux-musl
            filename: file_zip_linux_s390x
            host_os: ubuntu-latest

          - target: x86_64-unknown-netbsd
            filename: file_zip_netbsd_x64
            host_os: ubuntu-latest
            use_cross: true

          - target: i686-unknown-openbsd
            filename: file_zip_openbsd_386
            host_os: ubuntu-latest

          - target: x86_64-unknown-openbsd
            filename: file_zip_openbsd_x64
            host_os: ubuntu-latest

          - target: aarch64-unknown-openbsd
            filename: file_zip_openbsd_arm64
            host_os: ubuntu-latest

          - target: i686-unknown-freebsd
            filename: file_zip_freebsd_386
            host_os: ubuntu-latest
            install: "libc6-dev-i386"

#          - target: x86_64-unknown-freebsd
#            filename: file_zip_freebsd_x64
#            host_os: ubuntu-latest
#            use_cross: true

          - target: armv7-unknown-freebsd
            filename: file_zip_freebsd_arm
            host_os: ubuntu-latest

          - target: aarch64-unknown-freebsd
            filename: file_zip_freebsd_arm64
            host_os: ubuntu-latest

#          - target: x86_64-apple-darwin
#            filename: file_zip_darwin_amd64
#            host_os: macos-latest
#            use_cross: false
#
#          - target: aarch64-apple-darwin
#            filename: file_zip_darwin_arm64
#            host_os: macos-latest
#
#          - target: armv7-linux-androideabi
#            filename: file_zip_android_arm
#            host_os: ubuntu-latest
#            use_cross: true

          - target: aarch64-linux-android
            filename: file_zip_android_arm64
            host_os: ubuntu-latest
            use_cross: true

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}
      - name: Install packages
        if: ${{ matrix.install }}
        run: |
          sudo apt-get update
          sudo apt-get install -yq --no-install-suggests --no-install-recommends ${{ matrix.install }}
      - name: Install cross
        if: ${{ matrix.use_cross }}
        run: cargo install cross
      - name: Prepare toolchain
        if: ${{ !matrix.use_cross }}
        run: rustup target add ${{ matrix.target }}
      - name: Prepare toolchain
        if: ${{ matrix.use_cross }}
        run: |
          rustup component add rust-std --target ${{ matrix.target }}
      - name: Build
        if: ${{ matrix.use_cross }}
        run: cross build --release --target ${{ matrix.target }}
      - name: Build
        if: ${{ !matrix.use_cross }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Pre-upload
        if: ${{ !contains(matrix.target, 'windows') }}
        run: |
          mv target/${{ matrix.target }}/release/mcsm-zip target/${{ matrix.target }}/release/${{ matrix.filename }}
      - name: Pre-upload
        if: ${{ contains(matrix.target, 'windows') }}
        run: |
          mv target/${{ matrix.target }}/release/mcsm-zip.exe target/${{ matrix.target }}/release/${{ matrix.filename }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.filename }}
          path: target/${{ matrix.target }}/release/${{ matrix.filename }}
#  release:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Download artifacts
#        uses: actions/download-artifact@v4
#        with:
#          path: artifacts
#          merge-multiple: true
#      - name: Generate release info and tag
#        run: |
#          version=$(grep version Cargo.toml -m 1 | cut -d'=' -f2 | tr -d "\r" | tr -d ' ' | tr -d '"' | tr -d "'")
#          echo "version=$version">>$GITHUB_ENV
#          release_info=release.md
#          echo "release_info=$release_info">>$GITHUB_ENV
#          echo "## Commits" > $release_info
#          number=$(git log --oneline $(git rev-parse `git describe --tags --abbrev=0`)..HEAD | wc -l)
#          echo "$(git log --pretty='- [%h] %s' -$number)" >> $release_info
#      - name: Create Release
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          artifacts: artifacts/*
#          bodyFile: ${{ env.release_info }}
#          tag: ${{ env.version }}
#          name: ${{ env.version }}
#          makeLatest: true
